#!/usr/bin/env python

'''
Make a redrock template

This code uses DESI templates and code from

https://github.com/desihub/desispec
https://github.com/desihub/desisim
https://github.com/sbailey/empca
'''

from   __future__ import absolute_import, division, print_function

import sys, os
import random
import optparse
import astropy.units as u
import astropy.constants as const
import pylab as pl
import numpy as np
from   astropy.io import fits
from   empca import empca
import redrock

from   desisim.templates import QSO
from   desispec.interpolation import resample_flux

##  USAGE:
##  rrqsotemplate -o ./rrtemplate-QSO.fits  --nearir 1
##
##  Insufficient wavelength coverage for 

parser = optparse.OptionParser(usage = "%prog [options]")
parser.add_option("--niter", type=int,  help="Number of EMPCA iterations to run [%default]", default=10)
parser.add_option("--nvec", type=int,  help="Number of basis vectors to generate [%default]", default=10)
parser.add_option("--seed", type=int,  help="Seed for desisim.templates.ELG and LRG [%default]", default=123456)
parser.add_option('--version', type=str, help='Template version')
parser.add_option('--rrtype', type=str, default='GALAXY', help='RR type for template header.')
parser.add_option('--nearir', type=int, default=0, help='Wavelength extension to cover pfs 1.3um.')
parser.add_option("-o", "--outfile",  type=str, help="Output filename")

opts, args = parser.parse_args()

#- Check inputs before doing anything else
if opts.outfile is None:
    print('ERROR: Must provide -o/--outfile')
    parser.print_help()
    sys.exit(1)

#- Generate templates and resample to 0.1A grid that covers
#- z=0 to 1.85 for obsframe wavelengths 3500 to 11000, purposefully
#- avoiding Lyman-alpha to focus PCA variations on other lines
dw      = 0.1

if opts.nearir:
    ## wave      = np.arange(3500/(1+1.85), 11000 + dw/2, dw)
    wave         = np.arange(3500/(1+5.00), 13000 + dw/2, dw)
    opts.outfile = opts.outfile.split('.fits')[0] + '-nearir.fits'

else:
    wave         = np.arange(3500/(1 + 5.00), 11000 + dw/2, dw)

nqso = np.int(5 * 1e1) ## 1e3

##  QSO templates;  Observed.  Lyman-alpha forest?  
tflux, twave, tmeta, tobjmeta = QSO(maxwave=13000.0).make_templates(nqso, nocolorcuts=False, seed=opts.seed)
qsoflux = np.zeros((nqso, wave.size))

for i in range(nqso):
    qsoflux[i] = resample_flux(wave, twave, tflux[i])

flux = qsoflux

#- Normalize spectra so that PCA captures variance rather than normalization
for i in range(flux.shape[0]):
    flux[i] /= np.median(flux[i])

for i, x in enumerate(flux):
    pl.semilogy(wave, x)

## pl.ylim(0.0, 6.0)
pl.savefig(os.environ['BEAST'] + '/rrtemplate/plots/inspec.pdf')

## Save number of independent spectra. 
nspec = flux.shape[0]

#- EMPCA fit
print('RR: Fitting for %d basis vectors' % opts.nvec)
model = empca(flux, niter=opts.niter, nvec=opts.nvec)

#- Determine normalized coefficients for all inputs
print('RR: Normalizing coefficients for all inputs.')
# model.set_data(data, weights=np.ones_like(data))
for i in range(model.coeff.shape[0]):
    model.coeff[i] /= np.linalg.norm(model.coeff[i])

## Check the (eigvec, coeff) reconstruct the templates / archetypes and generally make sense. 
atypes = model.coeff.dot(model.eigvec)

print(atypes.shape)

pl.clf()

for i, x in enumerate(atypes):
  pl.semilogy(wave + 30. * i, x, label=i)

## pl.ylim(1.e-4, 1.)
pl.legend(ncol=2)
pl.yscale('log')
pl.savefig(os.environ['BEAST'] + '/rrtemplate/plots/atypes.pdf')

#- Write output
#- TODO: move to redrock.io.write_template
header = fits.Header()
header['CRVAL1'] = (wave[0], 'restframe starting wavelength [Angstroms]')
header['CDELT1'] = dw
header['RRTYPE']   = 'QSO'
header['RRSUBTYP'] = ''
header['RRVER'] = redrock.__version__
header['VERSION'] = (opts.version, 'Template version')
header['INSPEC'] = os.environ['DESI_BASIS_TEMPLATES']
header['SEED'] = opts.seed
header['EXTNAME'] = 'BASIS_VECTORS'

hdus = fits.HDUList()
hdus.append(fits.PrimaryHDU(model.eigvec, header=header))
hdus.append(fits.ImageHDU(model.coeff, name='ARCHETYPE_COEFF'))

hdus.writeto(opts.outfile, overwrite=True)

print('RR: Wrote ' + opts.outfile)
                                
